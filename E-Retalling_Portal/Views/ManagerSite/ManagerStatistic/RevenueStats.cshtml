@model List<E_Retalling_Portal.Models.ManagerStatisticModel.RevenueStats>

@{
    ViewData["Title"] = "Revenue Stats";
    Layout = "~/Views/Shared/ManagerSideBarLayout.cshtml";
}

<div class="content m-4 pb-3">
    <h2 class="text-center text-primary" style="margin-top: 20px; padding-top: 40px">Revenue Statistics</h2>

    &nbsp;From:
    <input type="date" id="startDatePicker" value="@DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd")" />

    &nbsp;To:
    <input type="date" id="endDatePicker" value="@DateTime.Now.ToString("yyyy-MM-dd")" />

    <div style="display:flex; justify-content:right; padding-right: 10px">
        <ul class="nav nav-pills justify-content-end mb-0" id="chart-tab-tab" role="tablist">
            <li class="nav-item w-50" role="presentation">
                <button class="nav-link active" id="chart-tab-home-tab" data-bs-toggle="pill" data-bs-target="#chart-tab-home" type="button" role="tab" aria-controls="chart-tab-home" onclick="setDisplayMode('month')" aria-selected="true">Month</button>
            </li>
            <li class="nav-item w-50" role="presentation">
                <button class="nav-link" id="chart-tab-profile-tab" data-bs-toggle="pill" data-bs-target="#chart-tab-profile" type="button" role="tab" aria-controls="chart-tab-profile" onclick="setDisplayMode('day')" aria-selected="false" tabindex="-1">Day</button>
            </li>
        </ul>
    </div>

    <div class="p-5">
        <canvas id="RevenueChart" width="100" height="50"></canvas>
    </div>
    <div style="display: flex; justify-content: flex-end; margin-bottom: 20px; margin-right: 20px;">
        <a href="@Url.Action("Index", "ManagerStatistic")" style="text-decoration: none; color: #007bff; border: 1px solid #007bff; border-radius: 5px; padding: 10px;">Back to List Shops</a>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Lấy dữ liệu từ model
    const revenueData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    let RevenueChart;
    let displayMode = 'month'; // Chế độ hiển thị mặc định

    // Thiết lập chế độ hiển thị
    function setDisplayMode(mode) {
        displayMode = mode;
        onDateChange(); // Cập nhật lại biểu đồ với chế độ mới
    }

    // Hàm cập nhật biểu đồ
    function updateChart(startDate, endDate) {
        const filteredData = revenueData.filter(item =>
            new Date(item.saleYear, item.saleMonth - 1, item.saleDay || 1) >= startDate &&
            new Date(item.saleYear, item.saleMonth - 1, item.saleDay || 1) <= endDate
        );

        let labels = [];
        let revenues = [];
        let transactionFees = [];

        if (displayMode === 'month') {
            const monthlyData = {};
            filteredData.forEach(item => {
                const label = `${item.saleMonth}/${item.saleYear}`;
                if (!monthlyData[label]) {
                    monthlyData[label] = { totalRevenue: 0, totalTransactionFee: 0 };
                }
                monthlyData[label].totalRevenue += item.totalRevenue;
                monthlyData[label].totalTransactionFee += item.totalTransactionFee;
            });
            labels = Object.keys(monthlyData);
            revenues = Object.values(monthlyData).map(item => item.totalRevenue);
            transactionFees = Object.values(monthlyData).map(item => item.totalTransactionFee);
        } else {
            labels = filteredData.map(item => `${item.saleDay}/${item.saleMonth}/${item.saleYear}`);
            revenues = filteredData.map(item => item.totalRevenue);
            transactionFees = filteredData.map(item => item.totalTransactionFee);
        }

        const ctx = document.getElementById('RevenueChart').getContext('2d');

        if (RevenueChart) {
            RevenueChart.destroy();
        }

        RevenueChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Shop Revenue (VND)',
                        data: revenues,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Transaction Fee (VND)',
                        data: transactionFees,
                        backgroundColor: 'rgba(255, 99, 132, 0.6)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: displayMode === 'month' ? 'Month/Year' : 'Day/Month/Year'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Amount (VND)'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                }
            }
        });
    }

    // Cập nhật biểu đồ khi thay đổi ngày
    function onDateChange() {
        const startDate = new Date(document.getElementById('startDatePicker').value);
        const endDate = new Date(document.getElementById('endDatePicker').value);

        if (startDate > endDate) {
            alert("Start Date is not greater than End Date");
            return;
        }

        updateChart(startDate, endDate);
    }

    document.getElementById('startDatePicker').addEventListener('change', onDateChange);
    document.getElementById('endDatePicker').addEventListener('change', onDateChange);

    // Khởi tạo biểu đồ với giá trị mặc định
    const startDate = new Date(document.getElementById('startDatePicker').value);
    const endDate = new Date(document.getElementById('endDatePicker').value);
    updateChart(startDate, endDate);
</script>

