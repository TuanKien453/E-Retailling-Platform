@{
	ViewData["Title"] = "Manager Dashboard";
	Layout = "~/Views/Shared/ManagerSideBarLayout.cshtml";
	var totalrevenues = ViewBag.TotalRevenueStatsByDate;

}
<style>
	.cards-container {
		display: grid;
		gap: 20px;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		max-width: 800px;
		margin: 0 auto;
	}

	/* Base card styles */
	.card {
		border-radius: 10px;
		padding: 20px;
		color: white;
		font-family: Arial, sans-serif;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		position: relative;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	}

	.card-orange {
		background-color: #FF5722;
	}

	/* Card icon */
	.card-icon {
		font-size: 2em; /* Kích thước của biểu tượng */
		margin-bottom: 10px; /* Khoảng cách dưới biểu tượng */
		display: flex; /* Để căn giữa biểu tượng */
		justify-content: center; /* Căn giữa theo chiều ngang */
		align-items: center; /* Căn giữa theo chiều dọc */
		width: 60px; /* Đường kính của vòng tròn */
		height: 60px; /* Đường kính của vòng tròn */
		border-radius: 50%; /* Tạo hình tròn */
		background-color: #f0f0f0; /* Màu nền (có thể thay đổi) */
	}

	.card-value {
		font-size: 2em;
		font-weight: bold;
		margin: 0;
	}

	.card-description {
		font-size: 1em;
		opacity: 0.8;
	}

	.card-percentage {
		font-size: 0.9em;
		font-weight: bold;
		position: absolute;
		bottom: 20px;
		right: 20px;
		color: #fff;
		opacity: 0.9;
	}

	.black-icon {
		color: black;
	}

	.revenue-container {
		display: flex;
		justify-content: space-between;
		padding: 20px;
		background: #fff;
		box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
		border-radius: 8px;
	}

	.revenue-details {
		display: flex;
		align-items: center;
	}

	.revenue-amount {
		margin-right: 15px;
	}

	.revenue-value {
		font-size: 1.5em;
		font-weight: bold;
		color: #333;
	}

	.revenue-label {
		font-size: 1em;
		color: #777;
	}

	.revenue-change {
		display: flex;
		align-items: center;
		color: #28a745; 
	}

	.change-percent {
		font-size: 1em;
		font-weight: bold;
		margin-right: 5px;
	}

	.icon-arrow {
		color: #28a745;
	}

	.revenue-icon .icon-chart {
		font-size: 2em;
		color: #007bff; 
	}

	.table {
		width: 100%;
		margin-bottom: 1rem;
		color: #212529; /* Text color */
	}

	.table-striped tbody tr:nth-of-type(odd) {
		background-color: #f2f2f2; /* Light gray for odd rows */
	}

	.table th,
	.table td {
		padding: 12px; /* Cell padding */
		vertical-align: middle; /* Align text vertically */
		border: 1px solid #dee2e6; /* Cell border */
	}

	.table th {
		background-color: #007bff; /* Blue header */
		color: white; /* White text in header */
		text-align: center; /* Center align header text */
	}

	.table-primary {
		background-color: #007bff; /* Blue background for primary table */
		color: white; /* White text */
	}

	.table-responsive {
		overflow-x: auto; /* Allow horizontal scrolling on smaller devices */
	}


</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
<script src="https://kit.fontawesome.com/710667f71a.js" crossorigin="anonymous"></script>

<div class="content m-4 pb-3">
	<div class="container-fluid py-4">
		<div class="row">
			<div class="col-lg-6 col-12">
				<div class="cards-container">
					<!-- Card 1 -->
					<div class="card card-orange">
						<div class="card-icon">
							<i class="bi bi-person black-icon"></i>
						</div>
						<div class="card-value">@ViewBag.TotalUsers</div>
						<div class="card-description">Total Users</div>
					</div>

					<!-- Card 2 -->
					<div class="card card-orange">
						<div class="card-icon black-icon">
							<i class="fa fa-id-badge"></i>
						</div>
						<div class="card-value">@ViewBag.CustomerAccounts</div>
						<div class="card-description">Customer's Accounts</div>
					</div>

					<!-- Card 3 -->
					<div class="card card-orange">
						<div class="card-icon">
							<i class="fa fa-shop black-icon"></i>
						</div>
						<div class="card-value">@ViewBag.TotalShops</div>
						<div class="card-description">Total Shops</div>
					</div>

					<!-- Card 4 -->
					<div class="card card-orange">
						<div class="card-icon">
							<i class="fa fa-tags black-icon"></i>
						</div>
						<div class="card-value">@ViewBag.TotalCategories</div>
						<div class="card-description">Total Categories</div>
					</div>
				</div>

			</div>

			<div class="col-lg-6 col-12 mt-4 mt-lg-0">
				<div class="card shadow h-100">
					@{
						var revenueStats = ViewBag.TotalRevenueStatsByDate as List<E_Retalling_Portal.Models.ManagerStatisticModel.RevenueStats>;

						int currentYear = DateTime.Now.Year;

						var yearlyRevenue = revenueStats
						.GroupBy(stat => stat.saleYear)
						.Select(g => new
						{
							Year = g.Key,
							TotalRevenue = g.Sum(stat => stat.totalRevenue)
						})
						.OrderByDescending(y => y.Year)
						.ToList();

						var currentYearRevenue = yearlyRevenue.FirstOrDefault(y => y.Year == currentYear)?.TotalRevenue ?? 0;
						var previousYearRevenue = yearlyRevenue.FirstOrDefault(y => y.Year == currentYear - 1)?.TotalRevenue ?? 0;


						var growth = previousYearRevenue != 0 ? ((currentYearRevenue - previousYearRevenue) / previousYearRevenue) * 100 : 0;
					}

					<div class="revenue-container">
						<div class="revenue-details">
							<div class="revenue-amount">
								<h5 class="revenue-value">@currentYearRevenue.ToString("C")</h5> 
								<h6 class="revenue-label">Total Revenue for @currentYear</h6>
							</div>
							<div class="revenue-change" style="display:flex; justify-content:end">
								<h6 class="change-percent" style="display:flex; justify-content:end">@((previousYearRevenue != 0) ? growth.ToString("F2") + "%" : "N/A")</h6><br/>
								<h6 style="display:flex; justify-content:end">Revenue changed compared to last year</h6>
								<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" class="icon-arrow" width="1em" height="1em" viewBox="0 0 24 24">
									<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m17 14l-5-5l-5 5"></path>
								</svg>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row mt-4">
			<div class="col-lg-5 mb-lg-0 mb-4">
				<div class="card z-index-2">

					@{
						var orderStats = ViewBag.TotalOrderStats as List<E_Retalling_Portal.Models.ManagerStatisticModel.OrderStats>;
					}

					<h2 class="text-center text-primary" style="margin: 40px">Order Statistics</h2>

					<div class="container">
						<div class="table-responsive">
							<table class="table table-striped table-bordered">
								<thead class="table-primary">
									<tr>
										<th>Month</th>
										<th>Total Orders</th>
									</tr>
								</thead>
								<tbody>
									@if (orderStats != null && orderStats.Any())
									{
										foreach (var item in orderStats.OrderByDescending(o => o.saleYear).ThenByDescending(o => o.saleMonth).Take(6))
										{
											<tr>
												<td>@($"{item.saleMonth}/{item.saleYear}")</td>
												<td>@item.totalOrders</td>
											</tr>
										}
									}
									else
									{
										<tr>
											<td colspan="2" class="text-center">No data available</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
			<div class="col-lg-7">
				<div class="card z-index-2">
					<div class="card-header pb-0">
						<h2 class="text-center text-primary" style="padding-top: 10px">Sale Overview</h2>
						<div>
						<div style="color:black">&nbsp;From:</div>
						<input type="date" id="startDatePicker" value="@DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd")" />

						<div style="color:black">&nbsp;To:</div>
						<input type="date" id="endDatePicker" value="@DateTime.Now.ToString("yyyy-MM-dd")" />

						<div style="display:flex; justify-content:right; padding-right: 10px">
							<ul class="nav nav-pills justify-content-end mb-0" id="chart-tab-tab" role="tablist">
								<li class="nav-item w-50" role="presentation">
									<button class="nav-link active" id="chart-tab-home-tab" data-bs-toggle="pill" data-bs-target="#chart-tab-home" type="button" role="tab" aria-controls="chart-tab-home" onclick="setDisplayMode('month')" aria-selected="true">Month</button>
								</li>
								<li class="nav-item w-50" role="presentation">
									<button class="nav-link" id="chart-tab-profile-tab" data-bs-toggle="pill" data-bs-target="#chart-tab-profile" type="button" role="tab" aria-controls="chart-tab-profile" onclick="setDisplayMode('day')" aria-selected="false" tabindex="-1">Day</button>
								</li>
							</ul>
						</div>
						</div>
					</div>
					<div class="card-body p-3">
						<div class="chart">
							<canvas id="RevenueChart" width="100" height="50"></canvas>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

	<script>
		// Lấy dữ liệu từ model
		const revenueData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(totalrevenues));
		let RevenueChart;
		let displayMode = 'month'; // Chế độ hiển thị mặc định

		// Thiết lập chế độ hiển thị
		function setDisplayMode(mode) {
			displayMode = mode;
			onDateChange(); // Cập nhật lại biểu đồ với chế độ mới
		}

		// Hàm cập nhật biểu đồ
		function updateChart(startDate, endDate) {
			const filteredData = revenueData.filter(item =>
				new Date(item.saleYear, item.saleMonth - 1, item.saleDay || 1) >= startDate &&
				new Date(item.saleYear, item.saleMonth - 1, item.saleDay || 1) <= endDate
			);

			let labels = [];
			let revenues = [];
			let transactionFees = [];

			if (displayMode === 'month') {
				const monthlyData = {};
				filteredData.forEach(item => {
					const label = `${item.saleMonth}/${item.saleYear}`;
					if (!monthlyData[label]) {
						monthlyData[label] = { totalRevenue: 0, totalTransactionFee: 0 };
					}
					monthlyData[label].totalRevenue += item.totalRevenue;
					monthlyData[label].totalTransactionFee += item.totalTransactionFee;
				});
				labels = Object.keys(monthlyData);
				revenues = Object.values(monthlyData).map(item => item.totalRevenue);
				transactionFees = Object.values(monthlyData).map(item => item.totalTransactionFee);
			} else {
				labels = filteredData.map(item => `${item.saleDay}/${item.saleMonth}/${item.saleYear}`);
				revenues = filteredData.map(item => item.totalRevenue);
				transactionFees = filteredData.map(item => item.totalTransactionFee);
			}

			const ctx = document.getElementById('RevenueChart').getContext('2d');

			if (RevenueChart) {
				RevenueChart.destroy();
			}

			RevenueChart = new Chart(ctx, {
				type: 'bar',
				data: {
					labels: labels,
					datasets: [
						{
							label: 'Revenue ($)',
							data: revenues,
							backgroundColor: 'rgba(54, 162, 235, 0.6)',
							borderColor: 'rgba(54, 162, 235, 1)',
							borderWidth: 1
						},
						{
							label: 'Transaction Fee ($)',
							data: transactionFees,
							backgroundColor: 'rgba(255, 99, 132, 0.6)',
							borderColor: 'rgba(255, 99, 132, 1)',
							borderWidth: 1
						}
					]
				},
				options: {
					responsive: true,
					scales: {
						x: {
							title: {
								display: true,
								text: displayMode === 'month' ? 'Month/Year' : 'Day/Month/Year'
							}
						},
						y: {
							title: {
								display: true,
								text: 'Amount ($)'
							},
							beginAtZero: true
						}
					},
					plugins: {
						legend: {
							display: true,
							position: 'top'
						}
					}
				}
			});
		}

		// Cập nhật biểu đồ khi thay đổi ngày
		function onDateChange() {
			const startDate = new Date(document.getElementById('startDatePicker').value);
			const endDate = new Date(document.getElementById('endDatePicker').value);

			if (startDate > endDate) {
				alert("Start Date is not greater than End Date");
				return;
			}

			updateChart(startDate, endDate);
		}

		document.getElementById('startDatePicker').addEventListener('change', onDateChange);
		document.getElementById('endDatePicker').addEventListener('change', onDateChange);

		// Khởi tạo biểu đồ với giá trị mặc định
		const startDate = new Date(document.getElementById('startDatePicker').value);
		const endDate = new Date(document.getElementById('endDatePicker').value);
		updateChart(startDate, endDate);
	</script>

	<script>
		var ctx = document.getElementById("chart-bars").getContext("2d");

		new Chart(ctx, {
			type: "bar",
			data: {
				labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
				datasets: [{
					label: "Sales",
					tension: 0.4,
					borderWidth: 0,
					borderRadius: 4,
					borderSkipped: false,
					backgroundColor: "#fff",
					data: [450, 200, 100, 220, 500, 100, 400, 230, 500],
					maxBarThickness: 6
				},],
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: false,
					}
				},
				interaction: {
					intersect: false,
					mode: 'index',
				},
				scales: {
					y: {
						grid: {
							drawBorder: false,
							display: false,
							drawOnChartArea: false,
							drawTicks: false,
						},
						ticks: {
							suggestedMin: 0,
							suggestedMax: 500,
							beginAtZero: true,
							padding: 15,
							font: {
								size: 14,
								family: "Inter",
								style: 'normal',
								lineHeight: 2
							},
							color: "#fff"
						},
					},
					x: {
						grid: {
							drawBorder: false,
							display: false,
							drawOnChartArea: false,
							drawTicks: false
						},
						ticks: {
							display: false
						},
					},
				},
			},
		});


		var ctx2 = document.getElementById("chart-line").getContext("2d");

		var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
		gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

		var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke2.addColorStop(1, 'rgba(20,23,39,0.2)');
		gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)'); //purple colors

		new Chart(ctx2, {
			type: "line",
			data: {
				labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
				datasets: [{
					label: "Mobile apps",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 0,
					borderColor: "#cb0c9f",
					borderWidth: 3,
					backgroundColor: gradientStroke1,
					fill: true,
					data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
					maxBarThickness: 6

				},
				{
					label: "Websites",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 0,
					borderColor: "#3A416F",
					borderWidth: 3,
					backgroundColor: gradientStroke2,
					fill: true,
					data: [30, 90, 40, 140, 290, 290, 340, 230, 400],
					maxBarThickness: 6
				},
				],
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: false,
					}
				},
				interaction: {
					intersect: false,
					mode: 'index',
				},
				scales: {
					y: {
						grid: {
							drawBorder: false,
							display: true,
							drawOnChartArea: true,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							padding: 10,
							color: '#b2b9bf',
							font: {
								size: 11,
								family: "Inter",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
					x: {
						grid: {
							drawBorder: false,
							display: false,
							drawOnChartArea: false,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							color: '#b2b9bf',
							padding: 20,
							font: {
								size: 11,
								family: "Inter",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
				},
			},
		});
	</script>
</div>